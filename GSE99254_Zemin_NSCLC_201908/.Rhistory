#Inner_join will merge table based on common identifier in the same column name. This function is part of dplyr
t.tab$cell_names[1:10]
class(t.tab$cell_names) #character
id$cell_names[1:10]
class(id$cell_names) #factor
i <- sapply(id, is.factor)
id[i] <- lapply(id[i], as.character)
class(id$cell_names) #Now the cell_names column is converted to character
#Merging step.
#There are a few issues so I resolved them.
t.tab$cell_names[10] #Id was connected by dot
id$cell_names[10] #Id was connected by hyphen
id$cell_names[10] #Id was connected by hyphen
id$cell_names <- gsub("-", ".", id$cell_names)
#Merge two table and excluded cells from no common id. Used inner_join
merged <- inner_join(id, t.tab, by = "cell_names")
dim(merged) #7172 12555
merged[c(1:8), c(1:12)] #Sanity test.
merged[c(1:8), c(1:12)] #Sanity test.
write.csv(merged, file="merged_all.csv")
#Selection of CD4_C8_FOXP3 cluster only
merged_foxp3only<- merged %>% filter(Cluster =="CD4_C12-FOXP3")
#Selection of CD4_C8_FOXP3 cluster only
merged_foxp3only<- merged %>% filter(majorCluster =="CD4_C12-FOXP3")
dim(merged_foxp3only) # 1042 12555 #~1/7 cells were ccr8+ cluster
dim(merged_foxp3only) # 1042 12555 #~1/7 cells were ccr8+ cluster
merged[c(1:8), c(1:12)] #Sanity test.
merged[c(1:8), c(1:12)] #Sanity test.
merged[c(,c(1:8)] #Sanity test.
merged[,c(1:8)]
df <- tibble(
x = sample(10, 100, rep = TRUE),
y = sample(10, 100, rep = TRUE)
)
df
distinct (df, x)
distinct(merged, majorCluster)
merged_foxp3only<- merged %>% filter(majorCluster =="CD4_C18-FOXP3")
dim(merged_foxp3only) # 1042 12555 #~1/7 cells were ccr8+ cluster
#Selection of CD4_C8_FOXP3 cluster only
distinct(merged, majorCluster) #Show unique values (all clusters)
distinct(merged, majorCluster) #Show unique values (all clusters)
merged_foxp3only<- merged %>% filter(majorCluster =="CD4_C8-FOXP3")
dim(merged_foxp3only) # 1042 12555 #~1/7 cells were ccr8+ cluster
write.csv(merged_foxp3, file="merged_foxp3.csv")
write.csv(merged_foxp3only, file="merged_foxp3.csv")
write.csv(merged_foxp3only, file="merged_foxp3.csv")
merged_foxp3onlyonly[c(1:50), c(1:12)]
merged_foxp3only[c(1:50), c(1:12)]
merged_foxp3only[c(1:50), c(1:12)]
tbl <- merged_foxp3only %>%
select(-cell_names, -tSNE1, -tSNE2, -majorCluster, -patient, -tissueType, -cellType, -cyclePhase, -Units) #select the necessary columnes only
tbl[c(1:20), c(1:10)]
tbl[c(1:20), c(1:10)]
#transpose data and maintain the first column as header
t_tbl <- as.data.frame(t(tbl)) #Transposing number only is much faster.
colnames(t_tbl) <- merged_foxp3only$cell_names #Add colname back
t_tbl[c(1:20), c(1:10)]
t_tbl[c(1:20), c(1:10)]
dim(t_tbl)
#Note that this filter is based on log2 value.
ccrhi <- tbl %>% filter(CCR8>4) %>% arrange(desc(CCR8)) #330 obs
ccrlo <- tbl %>% filter(CCR8>1 & CCR8 <3) %>% arrange(desc(CCR8)) #47 obs
ccrhi
ccrlo <- tbl %>% filter(CCR8>0.5 & CCR8 <3) %>% arrange(desc(CCR8)) #11 obs
#Now treat individual cells as individual replicate.
#Transpose the table
tccrhi <- as.data.frame(t(ccrhi))
tccrlo <- as.data.frame(t(ccrlo))
#Also note that stat should be done in linear values.
#Writing quick function to make the whole table to linear values
lin <- function (x, na.rm=FALSE) (2^x)
lin_tccrhi <- lin(tccrhi)
lin_tccrlo <- lin(tccrlo)
#Make sure both table contains same numbers of genes. 12546
dim(lin_tccrhi)
dim(lin_tccrlo)
#Calculate fold change CCRhi/CCRlo
datFC <- t_tbl %>%
rownames_to_column("gene_name") %>%
mutate(hi_mean = rowMeans(lin_tccrhi)) %>%
mutate(lo_mean = rowMeans(lin_tccrlo)) %>%
mutate(FC=hi_mean/lo_mean)
datFC[c(1:5), c(1:10)] #first column becomes gene_name
stat <- datFC %>%
select(gene_name, hi_mean, lo_mean, FC) #extracting FC stats only. with rownames
#Calculate SD
library(genefilter)
#Calculate SD
library(genefilter)
datFCSD <- stat %>%
mutate(hi_SD = rowSds(lin_tccrhi)) %>%
mutate(lo_SD = rowSds(lin_tccrlo))
library(broom) #for tidy function
testresults <- vector("list", nrow(datFCSD))
#Start for-loop. Takes some time.
for (j in seq(nrow(datFCSD))) {
testresults[[j]] <-tidy(t.test(as.data.frame(lin_tccrhi[j,]), as.data.frame(lin_tccrlo[j,])))
}
t_stats = do.call(rbind, testresults)
head(t_stats)
all_stats <-bind_cols(datFCSD, t_stats)
dim(all_stats)
head(all_stats)
head(all_stats)
write.csv(all_stats, file="stat_all.csv") #Summarized stat table.
#Select genes with high fold change and significant p values
up_in_ccr8hi <- all_stats %>%
select(-estimate1, -estimate2) %>%
filter(p.value <0.01 & FC >5) %>%
arrange (desc(FC))
down_in_ccr8hi <- all_stats %>%
select(-estimate1, -estimate2) %>%
filter(p.value <0.2 & FC <0.2) %>%
arrange (FC) #default is ascending order
write.csv(up_in_ccr8hi, file="5-fold_up_in_ccr8hi_sig.csv") #Summarized stat table.
write.csv(down_in_ccr8hi, file="5-fold_down_in_ccr8hi.csv") #Summarized stat table.
merged[c(1:10), c(1:10)]
ccrhi
dim(ccrhi)
#Note that this filter is based on log2 value.
ccrhi <- tbl %>% filter(CCR8>5) %>% arrange(desc(CCR8)) #60 obs
ccrlo <- tbl %>% filter(CCR8>1 & CCR8 <3) %>% arrange(desc(CCR8)) #16 obs
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggrepel)
a <- read.csv("GSE99254_stat_all.csv", header=T, stringsAsFactors = FALSE)
a$Significant <- ifelse((a$FC>18&a$p.value<0.01)|a$p.value<1/10^15, "Significant", "Not Sig")
pl<-ggplot(a, aes(x = log2(FC), y = -log10(p.value))) +
geom_point(aes(color = Significant)) +
scale_color_manual(values = c("grey", "red")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
geom_vline(xintercept=0, linetype="dashed", color = "blue", size=1)+
geom_vline(xintercept=log2(10), linetype="dashed", color = "blue")+
geom_vline(xintercept=log2(0.1), linetype="dashed", color = "blue")+
geom_hline(yintercept=-log10(1/10^15), linetype="dashed", color = "blue")+
geom_text_repel(
data = subset(a, (FC>18&p.value<0.01)|p.value<1/10^15),
aes(label = gene_name),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
plot(pl)
plot(pl)
pl<-ggplot(a, aes(x = log2(FC), y = -log10(p.value))) +
geom_point(aes(color = Significant)) +
scale_color_manual(values = c("grey", "red")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
geom_vline(xintercept=0, linetype="dashed", color = "blue", size=1)+
geom_vline(xintercept=log2(10), linetype="dashed", color = "blue")+
geom_vline(xintercept=log2(0.1), linetype="dashed", color = "blue")+
geom_hline(yintercept=-log10(1/10^10), linetype="dashed", color = "blue")+
geom_text_repel(
data = subset(a, (FC>18&p.value<0.01)|p.value<1/10^15),
aes(label = gene_name),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
plot(pl)
plot(pl)
pl<-ggplot(a, aes(x = log2(FC), y = -log10(p.value))) +
geom_point(aes(color = Significant)) +
scale_color_manual(values = c("grey", "red")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
geom_vline(xintercept=0, linetype="dashed", color = "blue", size=1)+
geom_vline(xintercept=log2(10), linetype="dashed", color = "blue")+
geom_vline(xintercept=log2(0.1), linetype="dashed", color = "blue")+
geom_hline(yintercept=-log10(1/10^5), linetype="dashed", color = "blue")+
geom_text_repel(
data = subset(a, (FC>18&p.value<0.01)|p.value<1/10^15),
aes(label = gene_name),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
plot(pl)
plot(pl)
b <- read.csv("GSE99254_stat_all.csv", header=T, stringsAsFactors = FALSE)
b<- b %>% filter(gene_name != "CCR8") #Remove row with CCR8
library(tidyverse)
b<- b %>% filter(gene_name != "CCR8") #Remove row with CCR8
dim(b)
dim(a)
b[c(1:10), c(1:10)]
b$Significant <- ifelse((b$FC>18&b$p.value<0.01)|b$p.value<1/10^15, "Significant", "Not Sig")
plb<-ggplot(b, aes(x = log2(FC), y = -log10(p.value))) +
geom_point(aes(color = Significant)) +
scale_color_manual(values = c("grey", "red")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
geom_vline(xintercept=0, linetype="dashed", color = "blue", size=1)+
geom_vline(xintercept=log2(10), linetype="dashed", color = "blue")+
geom_vline(xintercept=log2(0.1), linetype="dashed", color = "blue")+
geom_hline(yintercept=-log10(1/10^15), linetype="dashed", color = "blue")+
geom_text_repel(
data = subset(b, (FC>18&p.value<0.01)|p.value<1/10^15),
aes(label = gene_name),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
plot(plb)
plot(plb)
plb<-ggplot(b, aes(x = log2(FC), y = -log10(p.value))) +
geom_point(aes(color = Significant)) +
scale_color_manual(values = c("grey", "red")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
geom_vline(xintercept=0, linetype="dashed", color = "blue", size=1)+
geom_vline(xintercept=log2(10), linetype="dashed", color = "blue")+
geom_vline(xintercept=log2(0.1), linetype="dashed", color = "blue")+
geom_hline(yintercept=-log10(1/10^5), linetype="dashed", color = "blue")+
geom_text_repel(
data = subset(b, (FC>18&p.value<0.01)|p.value<1/10^15),
aes(label = gene_name),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
plot(plb)
plot(plb)
volcano.all("GSE99254_stat_all.csv")
volcano.all <- function(filename){
a <- read.csv(file = filename, header=T, stringsAsFactors = FALSE)
a$Significant <- ifelse((a$FC>18&a$p.value<0.01)|a$p.value<1/10^15, "Significant", "Not Sig")
pl<-ggplot(a, aes(x = log2(FC), y = -log10(p.value))) +
geom_point(aes(color = Significant)) +
scale_color_manual(values = c("grey", "red")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
geom_vline(xintercept=0, linetype="dashed", color = "blue", size=1)+
geom_vline(xintercept=log2(10), linetype="dashed", color = "blue")+
geom_vline(xintercept=log2(0.1), linetype="dashed", color = "blue")+
geom_hline(yintercept=-log10(1/10^5), linetype="dashed", color = "blue")+
geom_text_repel(
data = subset(a, (FC>18&p.value<0.01)|p.value<1/10^15),
aes(label = gene_name),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
plot(pl)
}
volcano.all("GSE99254_stat_all.csv")
volcano.noccr8 <- function(filename){
a <- read.csv(file = filename, header=T, stringsAsFactors = FALSE)
a <- a %>% filter(gene_name != "CCR8") #Remove row with CCR8. Only addition
a$Significant <- ifelse((a$FC>18&a$p.value<0.01)|a$p.value<1/10^15, "Significant", "Not Sig")
pl<-ggplot(a, aes(x = log2(FC), y = -log10(p.value))) +
geom_point(aes(color = Significant)) +
scale_color_manual(values = c("grey", "red")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
geom_vline(xintercept=0, linetype="dashed", color = "blue", size=1)+
geom_vline(xintercept=log2(10), linetype="dashed", color = "blue")+
geom_vline(xintercept=log2(0.1), linetype="dashed", color = "blue")+
geom_hline(yintercept=-log10(1/10^5), linetype="dashed", color = "blue")+
geom_text_repel(
data = subset(a, (FC>18&p.value<0.01)|p.value<1/10^15),
aes(label = gene_name),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
plot(pl)
}
volcano.noccr8("GSE99254_stat_all.csv")
volcano.all("GSE99254_stat_all.csv")
volcano.all("GSE99254_stat_all.csv")
volcano.noccr8("GSE99254_stat_all.csv")
volcano.noccr8("GSE99254_stat_all.csv")
merged_ctla4only[c(1:50), c(1:12)]
library(tidyverse)
tab <- read.delim("GSE99254/GSE99254_NSCLC.TCell.S11769.norm.centered.txt.gz") #Load file as tab delimited txt.
tab <- read.delim("GSE99254/GSE99254_NSCLC.TCell.S11769.norm.centered.txt.gz") #Load file as tab delimited txt.
dim(tab)
tab[c(1:10), c(1:20)]
#Start testing with small scale example.
tab_test<- tab[c(1:10), c(1:5)]
n1 <- tab_test$geneSymbol
t.tab_test <- as.data.frame(t(tab_test[,-c(1:2)])) #remove 1st and 2nd column and transpose
colnames(t.tab_test) <- n1
str(t.tab_test)
#Transpose the original tab table.
n2 <- tab$geneSymbol
t.tab <- as.data.frame(t(tab[,-c(1:2)])) #remove 1st and 2nd column and transpose
t.tab <- as.data.frame(t(tab[,-c(1:2)])) #remove 1st and 2nd column and transpose
colnames(t.tab) <- n2
t.tab[c(1:5), c(1:6)] #sanity test
#Next is to combine t.tab with data from tamatoa
id<-read.csv("Tamatoa/identifier-cluster_matching.csv", header=T)
rownames_test <- tibble::rownames_to_column(t.tab_test,"VALUE") #test with small table
t.tab <-tibble::rownames_to_column(t.tab, "cell_names") #t.tab was overwritten but column was assigne.
test <- !is.na(names(t.tab)) #64th column nas NA (not assigned) header. Only one missing header. All other headers were fine.
#Let's remove column with header NA from t.tab
t.tab <- t.tab[test] #re-assign only TRUE values
dim(id) #7172 x 9
dim(t.tab) #10805 x 12547 (12548 before removing NA)
#Inner_join will merge table based on common identifier in the same column name. This function is part of dplyr
t.tab$cell_names[1:10]
class(t.tab$cell_names) #character
id$cell_names[1:10]
class(id$cell_names) #factor
i <- sapply(id, is.factor)
id[i] <- lapply(id[i], as.character)
class(id$cell_names) #Now the cell_names column is converted to character
#Merging step.
#There are a few issues so I resolved them.
t.tab$cell_names[10] #Id was connected by dot
id$cell_names[10] #Id was connected by hyphen
id$cell_names <- gsub("-", ".", id$cell_names)
#Merge two table and excluded cells from no common id. Used inner_join
merged <- inner_join(id, t.tab, by = "cell_names")
dim(merged) #7172 12555
merged[c(1:8), c(1:12)] #Sanity test.
write.csv(merged, file="merged_all.csv")
write.csv(merged, file="merged_all.csv")
#Selection of CD4_C8_FOXP3 cluster only
distinct(merged, majorCluster) #Show unique values (all clusters)
merged_ctla4only<- merged %>% filter(majorCluster =="CD4_C8-CTLA4")
dim(merged_ctla4only) # 427 cells
write.csv(merged_ctla4only, file="merged_ctla4.csv")
#Selection of CD4_C8_CTLA4 cluster only
distinct(merged, majorCluster) #Show unique values (all clusters)
distinct(merged, majorCluster) #Show unique values (all clusters)
dim(merged_ctla4only) # 427 cells
write.csv(merged_ctla4only, file="merged_ctla4.csv")
merged_ctla4only[c(1:50), c(1:12)]
tbl <- merged_ctla4only %>%
select(-cell_names, -tSNE1, -tSNE2, -majorCluster, -patient, -tissueType, -cellType, -cyclePhase, -Units) #select the necessary columnes only
#transpose data and maintain the first column as header
t_tbl <- as.data.frame(t(tbl)) #Transposing number only is much faster.
colnames(t_tbl) <- merged_ctla4only$cell_names #Add colname back
t_tbl[c(1:20), c(1:10)]
dim(t_tbl)
t_tbl[c(1:20), c(1:10)]
dim(t_tbl)
merged_ctla4only[c(1:50), c(1:12)]
merged_ctla4only[c(1:50), c(1:12)]
#Selection of CD4_C8_CTLA4 cluster only
distinct(merged, majorCluster) #Show unique values (all clusters)
distinct(merged, majorCluster) #Show unique values (all clusters)
dim(merged_ctla4only) # 427 cells
dim(merged_ctla4only) # 427 cells
merged_ctla4only<- merged %>% filter(majorCluster =="CD4_C9-CTLA4")
dim(merged_ctla4only) # 427 cells
write.csv(merged_ctla4only, file="merged_ctla4.csv")
1:12
merged_ctla4only[c(1:50), c(1:12)]
tbl <- merged_ctla4only %>%
select(-cell_names, -tSNE1, -tSNE2, -majorCluster, -patient, -tissueType, -cellType, -cyclePhase, -Units) #select the necessary columnes only
tbl[c(1:20), c(1:10)]
#transpose data and maintain the first column as header
t_tbl <- as.data.frame(t(tbl)) #Transposing number only is much faster.
colnames(t_tbl) <- merged_ctla4only$cell_names #Add colname back
t_tbl[c(1:20), c(1:10)]
dim(t_tbl)
#Note that this filter is based on log2 value.
ccrhi <- tbl %>% filter(CCR8>8) %>% arrange(desc(CCR8)) #52 obs
ccrlo <- tbl %>% filter(CCR8>1 & CCR8 <4) %>% arrange(desc(CCR8)) #11 obs
#Now treat individual cells as individual replicate.
#Transpose the table
tccrhi <- as.data.frame(t(ccrhi))
tccrlo <- as.data.frame(t(ccrlo))
#Also note that stat should be done in linear values.
#Writing quick function to make the whole table to linear values
lin <- function (x, na.rm=FALSE) (2^x)
lin_tccrhi <- lin(tccrhi)
lin_tccrlo <- lin(tccrlo)
#Make sure both table contains same numbers of genes. 12546
dim(lin_tccrhi)
dim(lin_tccrlo)
#Calculate fold change CCRhi/CCRlo
datFC <- t_tbl %>%
rownames_to_column("gene_name") %>%
mutate(hi_mean = rowMeans(lin_tccrhi)) %>%
mutate(lo_mean = rowMeans(lin_tccrlo)) %>%
mutate(FC=hi_mean/lo_mean)
datFC[c(1:5), c(1:10)] #first column becomes gene_name
stat <- datFC %>%
select(gene_name, hi_mean, lo_mean, FC) #extracting FC stats only. with rownames
#Calculate SD
library(genefilter)
#Calculate SD
library(genefilter)
datFCSD <- stat %>%
mutate(hi_SD = rowSds(lin_tccrhi)) %>%
mutate(lo_SD = rowSds(lin_tccrlo))
library(broom) #for tidy function
testresults <- vector("list", nrow(datFCSD))
#Start for-loop. Takes some time.
for (j in seq(nrow(datFCSD))) {
testresults[[j]] <-tidy(t.test(as.data.frame(lin_tccrhi[j,]), as.data.frame(lin_tccrlo[j,])))
}
#Start for-loop. Takes some time.
for (j in seq(nrow(datFCSD))) {
testresults[[j]] <-tidy(t.test(as.data.frame(lin_tccrhi[j,]), as.data.frame(lin_tccrlo[j,])))
}
t_stats = do.call(rbind, testresults)
head(t_stats)
head(t_stats)
head(t_stats)
all_stats <-bind_cols(datFCSD, t_stats)
dim(all_stats)
head(all_stats)
write.csv(all_stats, file="GSE99254_stat_all.csv") #Summarized stat table.
#Select genes with high fold change and significant p values
up_in_ccr8hi <- all_stats %>%
select(-estimate1, -estimate2) %>%
filter(p.value <0.01 & FC >5) %>%
arrange (desc(FC))
down_in_ccr8hi <- all_stats %>%
select(-estimate1, -estimate2) %>%
filter(p.value <0.2 & FC <0.2) %>%
arrange (FC) #default is ascending order
write.csv(up_in_ccr8hi, file="GSE99254_5-fold_up_in_ccr8hi_sig.csv") #Summarized stat table.
write.csv(down_in_ccr8hi, file="GSE99254_5-fold_down_in_ccr8hi.csv") #Summarized stat table.
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggrepel)
a <- read.csv("GSE99254_stat_all.csv", header=T, stringsAsFactors = FALSE)
a$Significant <- ifelse((a$FC>18&a$p.value<0.01)|a$p.value<1/10^15, "Significant", "Not Sig")
pl<-ggplot(a, aes(x = log2(FC), y = -log10(p.value))) +
geom_point(aes(color = Significant)) +
scale_color_manual(values = c("grey", "red")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
geom_vline(xintercept=0, linetype="dashed", color = "blue", size=1)+
geom_vline(xintercept=log2(10), linetype="dashed", color = "blue")+
geom_vline(xintercept=log2(0.1), linetype="dashed", color = "blue")+
geom_hline(yintercept=-log10(1/10^5), linetype="dashed", color = "blue")+
geom_text_repel(
data = subset(a, (FC>18&p.value<0.01)|p.value<1/10^15),
aes(label = gene_name),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
plot(pl)
library(tidyverse)
b <- read.csv("GSE99254_stat_all.csv", header=T, stringsAsFactors = FALSE)
b<- b %>% filter(gene_name != "CCR8") #Remove row with CCR8
dim(b)
dim(a)
b[c(1:10), c(1:10)]
b$Significant <- ifelse((b$FC>18&b$p.value<0.01)|b$p.value<1/10^15, "Significant", "Not Sig")
plb<-ggplot(b, aes(x = log2(FC), y = -log10(p.value))) +
geom_point(aes(color = Significant)) +
scale_color_manual(values = c("grey", "red")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
geom_vline(xintercept=0, linetype="dashed", color = "blue", size=1)+
geom_vline(xintercept=log2(10), linetype="dashed", color = "blue")+
geom_vline(xintercept=log2(0.1), linetype="dashed", color = "blue")+
geom_hline(yintercept=-log10(1/10^5), linetype="dashed", color = "blue")+
geom_text_repel(
data = subset(b, (FC>18&p.value<0.01)|p.value<1/10^15),
aes(label = gene_name),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
plot(plb)
plot(pl)
plot(pl)
plot(plb)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggrepel)
a <- read.csv("GSE99254_ccr8_stat_all.csv", header=T, stringsAsFactors = FALSE)
a$Significant <- ifelse((a$FC>18&a$p.value<0.01)|a$p.value<1/10^15, "Significant", "Not Sig")
pl<-ggplot(a, aes(x = log2(FC), y = -log10(p.value))) +
geom_point(aes(color = Significant)) +
scale_color_manual(values = c("grey", "red")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
geom_vline(xintercept=0, linetype="dashed", color = "blue", size=1)+
geom_vline(xintercept=log2(10), linetype="dashed", color = "blue")+
geom_vline(xintercept=log2(0.1), linetype="dashed", color = "blue")+
geom_hline(yintercept=-log10(1/10^5), linetype="dashed", color = "blue")+
geom_text_repel(
data = subset(a, (FC>18&p.value<0.01)|p.value<1/10^15),
aes(label = gene_name),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
plot(pl)
#Want to add SD information on top of it.
#But P.value actually contains this SD informaiton, so may not be necessary.
#Next: Generate the one without CCR8
library(tidyverse)
b <- read.csv("GSE99254_ccr8_stat_all.csv", header=T, stringsAsFactors = FALSE)
b<- b %>% filter(gene_name != "CCR8") #Remove row with CCR8
dim(b)
dim(a)
b[c(1:10), c(1:10)]
#This still contains CCR8 somehow.
b$Significant <- ifelse((b$FC>18&b$p.value<0.01)|b$p.value<1/10^15, "Significant", "Not Sig")
plb<-ggplot(b, aes(x = log2(FC), y = -log10(p.value))) +
geom_point(aes(color = Significant)) +
scale_color_manual(values = c("grey", "red")) +
theme_bw(base_size = 12) + theme(legend.position = "bottom") +
geom_vline(xintercept=0, linetype="dashed", color = "blue", size=1)+
geom_vline(xintercept=log2(10), linetype="dashed", color = "blue")+
geom_vline(xintercept=log2(0.1), linetype="dashed", color = "blue")+
geom_hline(yintercept=-log10(1/10^5), linetype="dashed", color = "blue")+
geom_text_repel(
data = subset(b, (FC>18&p.value<0.01)|p.value<1/10^15),
aes(label = gene_name),
size = 5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
plot(plb)
plot(plb)
plot(pl)
